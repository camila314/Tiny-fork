use import("examples/terp/src/point.tiny")

use array("Point") as array_pt
use array("int") as array_int

i := int_to_i64(0)

i = i64_add_many(int_to_i64(1000))

printf("%s\n", i64_to_string(i))

arr := array_int()

array_int_push(arr, 10)

printf("%q\n", arr)

s := ""

if strlen(s) == 0 || stridx(s, 0) == 'a' {
    printf("Short circuit or works\n")
}

struct Test {
    x: int
    y: int
}

printf("%q\n", new Test{10, 20})

//func should_not_compile(): int {
//    return ""
//}

func assign_to_arg(n: int) {
    n = 10
    printf("%q\n", n)
}

use array("any") as array_any

func array_has(arr: array_any, obj: any): bool {
    len := array_any_len(arr)

    for i := 0; i < len; i += 1 {
        value := array_any_get(arr, i)
        printf("%q\n", value)
        if value == obj {
            return true
        }
    }
    
    return false
}

struct Test2 {
    x: int
}

a := new Test2{10}
b := new Test2{20}
c := new Test2{30}

arr2 := array_any(a, b, c)

if !array_has(arr2, a) {
    printf("array_has is broken\n")
}

pt_array := array_pt()

array_pt_push(pt_array, new Point{10, 20})
my_point := array_pt_get(pt_array, 0)

printf("pt_array=%q, my_point.y=%q\n", pt_array, my_point.y)

printf("%q\n", Point_to_json(my_point))

x := (new Point{10, 20}).x

printf("%q\n", x)