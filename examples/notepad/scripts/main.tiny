last_char := ' '

hop_buffer := array()
unhop_buffer := array()

spaces_per_tab :: 4
max_hop_buffer_len :: 32

func push_hop() {
    if array_len(hop_buffer) >= max_hop_buffer_len {
        array_shift(hop_buffer)
    }
    
    array_push(hop_buffer, get_y()) 
    array_clear(unhop_buffer)
}

func pop_hop() {
    if array_len(hop_buffer) <= 0 {
        return;
    }
    
    y := array_pop(hop_buffer)
    
    if array_len(unhop_buffer) >= max_hop_buffer_len {
        array_shift(unhop_buffer)
    }
    
    array_push(unhop_buffer, get_y())
    
    move_to(0, y)
}

func pop_unhop() {
    if array_len(unhop_buffer) <= 0 {
        return;
    }
    
    y := array_pop(unhop_buffer) 
    
    if array_len(hop_buffer) >= max_hop_buffer_len {
        array_shift(hop_buffer) 
    }
    
    array_push(hop_buffer, get_y())
    
    move_to(0, y)
}

func move_reset(x, y) {
    last_char = ' '
    move(x, y)
}

func file_opened(name) {
    set_status("Opened file %s", name)
}

func file_written(name) {
    set_status("Wrote to file %s", name)
}

func handle_command(cmd) {
    if strlen(cmd) == 0 return;

    if stridx(cmd, 0) == 'e' {
        i := 1
        
        while stridx(cmd, i) == ' ' or stridx(cmd, i) == '\t' {
            i += 1
        }

        s := substr(cmd, i, -1)
        
        x := 0
        y := 0  
        
        if s == "" or strspn(s, " ") == strlen(s) {
            s = get_filename()         
            x = get_x()
            y = get_y()
        }
          
        if not open_file(s) {
            set_status("Failed to open file %s for writing.", s)
        }
        
        move_to(x, y + 10)
        move_to(x, y)       
    } else if stridx(cmd, 0) == 'w' {
        if not write_file(get_filename()) {
            set_status("Failed to write to file %s.", get_filename())
        } else if strlen(cmd) > 1 and stridx(cmd, 1) == 'q' {
            exit(0)
        }
    } else if stridx(cmd, 0) == 'q' {
        exit(0)
    } else if stridx(cmd, 0) >= '0' and stridx(cmd, 0) <= '9' {
        // Jump to line
        move_to(get_x(), strtod(cmd) - 1)
    } else if stridx(cmd, 0) == '.' {
        reload_scripts_next_frame()
    }
}

func apply_brace_indent() {
    spaces := count_braces_down(get_y()) * spaces_per_tab

    move_to(0, get_y())

    for i := 0; i < spaces; i += 1 { 
        insert_char(' ')
        move(1, 0)
    }
}

func get_prev_word_x() {
    i := get_x()
    s := get_line()
    
    if i > 0 {
        if i - 1 >= 0 and stridx(s, i - 1) == ' ' {
            i -= 1
            while stridx(s, i) == ' ' and i >= 0 {
                i -= 1
            }

            return i
        } else {
            while stridx(s, i) != ' ' and i >= 0 {
                i -= 1
            }

            return i + 1
        }
    } else {
        return i
    }
}

func get_next_word_x() {
    i := get_x()
    s := get_line()
    len := strlen(s)
     
    if i < len - 1 {
        if stridx(s, i + 1) == ' ' {
            i += 1
            
            while stridx(s, i) == ' ' and i < len {
                i += 1
            }
            
            return i
        } else if stridx(s, i) == ' ' {
            while stridx(s, i) == ' ' and i < len {
                i += 1
            }

            return i
        } else { 
            while stridx(s, i) != ' ' and i < len {
               i += 1
           }

           return i - 1
       }
    } else {
        return i
    }
}

func delete_selected_lines(should_store) {
    // TODO(Apaar): Implement asserts so that we can make sure we're in visual mode here 
    a := get_vstart_y()
    b := get_y()

    if a > b {
        temp := b
        b = a
        a = temp
    }

    clear_temp_lines()

    failed_to_store := false

    for i := a; i <= b and not failed_to_store; i += 1 {
        if should_store {
            if store_temp_line(get_line(a)) {
                remove_line(a)
            } else {
                failed_to_store = true
            }
        } else {
            remove_line(a)
        }
    }

    if failed_to_store {
        set_status("Failed to store some lines in the temporary buffer. Not all lines were deleted.")
    }

    move_to(0, a)
}

func dedent_line(i) {
    line := get_line(i)
    move_to(strspn(line, " ") - 1, i) 
                    
    not_space := true
        
    for i := 0; i < spaces_per_tab and not_space; i += 1 {
        // TODO(Apaar): This check could be optimized
        if stridx(line, get_x()) != ' ' {
            not_space = false
        } else {
            remove_char()
            move(-1, 0) 
        }
    }
}

func indent_line(i) {    
    // Move to the start of the line
    move_to(strspn(get_line(i), " "), i)

    for i := 0; i < spaces_per_tab; i += 1 {
        insert_char(' ')
        move(1, 0)
    }
}

func update_normal_mode() {
    ch := read_char()

    if last_char == 'r' and ch > 0 {
        set_char(ch)
        last_char = ' '
        return;
    }
    
    if ch == 27 {
        set_mode(MODE_NORMAL)
        return;
    }

    if get_command() != "" {
        if ch == 'n' {
            move(0, 1)
            s := get_command()
            move_to_first_occurance_of_string(s, false) 
            
            // Space it out a bit
            move(0, 10)
            move(0, -10)
        } else if ch == 'N' { 
            move(0, -1)
            s := get_command()
            move_to_first_occurance_of_string(s, true)
            
            // Space it out a bit
            move(0, 10)
            move(0, -10)
        }
    }

    if ch == 'V' {
        set_mode(MODE_VISUAL_LINE)
        return;
    }

    if ch == '/' {
        set_mode(MODE_FORWARD_SEARCH)
        return;
    }
    
    if ch == 'i' {        
        set_mode(MODE_INSERT)
        return;
    }

    if ch == 'I' {
        set_mode(MODE_INSERT)
        move_to(strspn(get_line(), " "), get_y())
        return;
    }

    if ch == 'a' {
        set_mode(MODE_INSERT)
        move(1, 0)
        return;
    }

    if ch == 'A' {
        set_mode(MODE_INSERT)
        move(strlen(get_line()), 0)
        return;
    }

    if ch == 'o' {
        set_mode(MODE_INSERT)
        insert_empty_line(get_y() + 1)
        move(0, 1)
        apply_brace_indent()
        return;
    }

    if ch == 'O' {
        set_mode(MODE_INSERT)
        insert_empty_line()
        apply_brace_indent()
        return;
    }

    if ch == '>' {
        if get_mode() != MODE_VISUAL_LINE {
            if last_char == '>' {
                indent_line(get_y())
                last_char = ' '
            } else {
                last_char = '>'
            }
        } else {     
            a := get_vstart_y()
            b := get_y()

            if a > b {
                temp := b
                b = a
                a = temp
            }    
            
            for i := a; i <= b; i += 1 {
                indent_line(i)
            }
            
            set_mode(MODE_NORMAL)
            move_to(0, a)
        }
    }

    if ch == '<' {
        if get_mode() != MODE_VISUAL_LINE {
            if last_char == '<' {
                dedent_line(get_y())            
                last_char = ' '
            } else {
                last_char = '<'
            }
        } else {
            a := get_vstart_y()
            b := get_y()

            if a > b {
                temp := b
                b = a
                a = temp
            }    
            
            for i := a; i <= b; i += 1 {
                dedent_line(i)
            }
            
            set_mode(MODE_NORMAL)
            move_to(0, a)
        }
    }
    
    if ch == 'e' {
        if last_char == 'c' {
            x := get_next_word_x()
            
            set_mode(MODE_INSERT)

            for i := get_x(); i <= x; i += 1 {
                remove_char()
            }
        } else {
            move_to(get_next_word_x(), get_y())
        }

        last_char = ' '
        return;
    }
    
    if ch == 'b' {
        move_to(get_prev_word_x(), get_y())
        last_char = ' '
        return;
    }

    if ch == 'p' or ch == 'P' {
        if temp_line_count() == 0 {
            set_status("You have no lines in the temporary buffer.")
            return;
        }

        if get_mode() == MODE_VISUAL_LINE {
            delete_selected_lines(false)
        }

        if ch == 'p' {
            move(0, 1)
        }

        cur_x := get_x()
        cur_y := get_y()

        count := temp_line_count()

        for i := 0; i < count; i += 1 {
            insert_empty_line()
            insert_string(get_temp_line(i))
            move(0, 1)
        }

        move_to(cur_x, cur_y)

        set_status("Pasted %g lines.", count) 
        set_mode(MODE_NORMAL)
    }

    if get_mode() == MODE_VISUAL_LINE {
        if ch == 'd' or ch == 'c' {
            delete_selected_lines(true)

            if ch == 'd' { 
                set_mode(MODE_NORMAL)
            } else {
                set_mode(MODE_INSERT)
                apply_brace_indent()
            }
            return;
        } else if ch == 'y' {
            a := get_vstart_y()
            b := get_y()

            if a > b {
                temp := b
                b = a
                a = temp
            }

            clear_temp_lines()

            failed_to_store := false

            for i := a; i <= b and not failed_to_store; i += 1 {
                if not store_temp_line(get_line(i)) {
                    failed_to_store = true
                }
            }

            if failed_to_store {
                set_status("Failed to yank some lines. Be careful.")
            } else {
                set_status("Yanked %g lines.", b - a + 1)
            }

            set_mode(MODE_NORMAL)
        }
    } else if ch == 'd' {
        if last_char == 'd' {
            if line_count() > 1 {
                clear_temp_lines()
                store_temp_line(get_line())
                remove_line()
            }

            last_char = ' '
        } else {
            last_char = ch
        }

        return;
    }
    
    if ch == 'c' {
        if last_char == 'c' {
            start_x := strspn(get_line(), " ")

            remove_line()
            set_mode(MODE_INSERT)
            insert_empty_line()

            for i := 0; i < start_x; i += 1 {
                insert_char(' ')
                move(1, 0)
            }
        } else {
            last_char = 'c'
        }
    }
    
    if ch == 15 {
        // CTRL + O
        pop_hop()
    } else if ch == 9 {
        // CTRL + I
        pop_unhop()
    }

    if ch == 'h' {
        move_reset(-1, 0)
    } else if ch == 'j' {
        move_reset(0, 1)
    } else if ch == 'k' {
        move_reset(0, -1)
    } else if ch == 'l' {
        move_reset(1, 0)
    } 

    if ch == 'x' {
        if get_line() != "" {
            remove_char()
            if get_x() >= strlen(get_line()) move(-1, 0)
        }
    }
    
    if ch == ']' {
        // TODO(Apaar): Go to the next line that has a lower brace count
        // this way it gets matched w the outermost brace instead
        if last_char == ']' {
            done := false
            
            for i := get_y() + 1; i < line_count() and not done; i += 1 {
                s := get_line(i)
                len := strlen(s)
                x := 0
                
                while x < len {
                    if stridx(s, x) == '}' {
                        move_to(x, i)
                        done = true
                        x = len
                    } else if stridx(s, x) != ' ' {
                        x = len 
                    }
                    x += 1
                }
            }
            
            last_char = ' '
        } else {
            last_char = ']'
        }
    }
    
    if ch == '[' {
        if last_char == '[' {
        }
    }
 
    if ch == '{' {
        done := false
        for i := get_y() - 1; i >= 0 and not done; i -= 1 {
            if get_line(i) == "" {
                move(0, i - get_y())
                done = true
            }
        }
        
        if not done {
            move(0, -line_count())
        }
    } else if ch == '}' {
        done := false
        for i := get_y() + 1; i < line_count() and not done; i += 1 {
            if get_line(i) == "" {
                move(0, i - get_y())
                done = true
            }
        }
        
        if not done {
            move(0, line_count())
        }
    }
    
    if ch == 'G' {
        push_hop()
        
        move_to(0, line_count() - 1)
        last_char = ' '
        set_status("To the bottom!")
    } else if ch == 'g' {
        if last_char == 'g' {
            push_hop()
            
            set_status("To the top!")
            move_to(0, 0)
            last_char = ' '
        } else {
            last_char = 'g'
        }
    } 

    if ch == ':' {
        set_mode(MODE_COMMAND)
    }

    if ch == 'r' {
        last_char = 'r'
    }
}

func update_insert_mode() {
    ch := read_char()

    if ch == 27 {
        // escape
        set_mode(MODE_NORMAL)
        move(-1, 0)
    } else if ch == 8 {
        // backspace
        if get_x() == 0 {
            if get_y() > 0 {
                s := get_line()

                move_to(0, get_y() - 1)
                move(strlen(get_line()), 0)

                insert_string(s)
                remove_line(get_y() + 1)
            }
        } else {
            // if there's only spaces before us, maybe we can move back by
            // tab width
            spaces_only := strspn(get_line(), " ") == get_x()

            if not spaces_only {
                move(-1, 0)
                remove_char()
            } else {
                spaces := get_x() - floor((get_x() - 1) / spaces_per_tab) * spaces_per_tab

                for i := 0; i < spaces; i += 1 {
                    move(-1, 0)
                    remove_char()
                }
            }
        }
    } else if ch == 10 {
        x := get_x()
        
        if x == strlen(get_line()) {
            insert_empty_line(get_y() + 1)
            move(0, 1)
        } else {
            rest := get_line_from(get_x()) 
            move(0, 1)

            insert_empty_line()
            insert_string(rest)

            terminate_line(get_y() - 1, x)
        }
        apply_brace_indent()
    } else if ch == 127 {
        // Ctrl + backspace 
        line := get_line()
        start_x := get_prev_word_x()
 
        if strspn(line, " ") == strlen(line) {
            if get_y() > 0 {
                remove_line()
                move(0, -1)
                move_to(strlen(get_line()), get_y())
            }
            return;
        }
        
        if start_x == strlen(line) {
            start_x -= 1
        }  

        while stridx(line, start_x) != ' ' and start_x > 0 {
            start_x -= 1
        }
         
        stop := false
  
        while get_x() > start_x and not stop {
            move(-1, 0)
            if get_x() > 0 {
                remove_char()
            } else {
                stop = true
            } 
        }
    } else if ch > 0 {
        if ch == 9 {
            spaces := ceil((get_x() + 1) / spaces_per_tab) * spaces_per_tab - get_x()

            for i := 0; i < spaces; i += 1 {
                insert_char(' ')
            }

            move(spaces, 0)
        } else {
            insert_char(ch)
            move(1, 0)

            if ch == '}' {
                line := get_line()
                if stridx(line, strspn(line, " ")) == '}' {
                    // Spaces all the way 
                    spaces := (count_braces_down(get_y()) - 1) * spaces_per_tab

                    if spaces >= 0 {
                        terminate_line(get_y(), spaces + 1)
                        move_to(spaces, get_y())
                        set_char('}')
                        move(1, 0)
                    }
                }
            }
        }  
    }
}

func update() {
    if get_mode() == MODE_INSERT update_insert_mode()
    else if get_mode() == MODE_NORMAL or get_mode() == MODE_VISUAL_LINE update_normal_mode()
}


